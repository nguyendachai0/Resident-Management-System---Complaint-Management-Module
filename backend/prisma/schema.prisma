generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  BUILDING_MANAGER
  STAFF
  RESIDENT
}

enum ComplaintCategory {
  MAINTENANCE
  SECURITY
  NOISE
  FACILITIES
  UTILITIES
  OTHER
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole
  fullName     String   @map("full_name")
  phone        String?
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  apartments         Apartment[] @relation("ApartmentOwner")
  reportedComplaints Complaint[] @relation("ComplaintReporter")
  assignedComplaints Complaint[] @relation("ComplaintAssignee")
  Comment            Comment[]

  @@map("users")
}

model Building {
  id        String   @id @default(cuid())
  name      String
  address   String
  floors    Int
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  apartments Apartment[]

  @@map("buildings")
}

model Apartment {
  id         String   @id @default(cuid())
  unitNumber String   @map("unit_number")
  floor      Int
  areaSqm    Decimal  @map("area_sqm")
  buildingId String   @map("building_id")
  ownerId    String?  @map("owner_id")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  building   Building    @relation(fields: [buildingId], references: [id])
  owner      User?       @relation("ApartmentOwner", fields: [ownerId], references: [id])
  complaints Complaint[]

  @@unique([buildingId, unitNumber])
  @@map("apartments")
}

model Complaint {
  id          String            @id @default(cuid())
  title       String
  description String
  category    ComplaintCategory
  status      ComplaintStatus   @default(PENDING)
  priority    Priority          @default(MEDIUM)
  reporterId  String            @map("reporter_id")
  assigneeId  String?           @map("assignee_id")
  apartmentId String            @map("apartment_id")
  attachments String[]          @default([])
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  resolvedAt  DateTime?         @map("resolved_at")

  // Relations
  reporter  User      @relation("ComplaintReporter", fields: [reporterId], references: [id])
  assignee  User?     @relation("ComplaintAssignee", fields: [assigneeId], references: [id])
  apartment Apartment @relation(fields: [apartmentId], references: [id])
  comments  Comment[]

  @@map("complaints")
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  complaintId String   @map("complaint_id")
  authorId    String   @map("author_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  complaint Complaint @relation(fields: [complaintId], references: [id])
  author    User      @relation(fields: [authorId], references: [id])

  @@map("comments")
}
